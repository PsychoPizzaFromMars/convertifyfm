import React, { Component } from 'react'
import SubmitPlaylistForm from '../../components/SubmitPlaylistForm';
import TrackCard from '../../components/TrackCard';
import { makeRequest } from '../../services/fetchData';
import { filterTracks, convertToUnixDate } from '../../services/helperFunctions';
import arrowDown from "../../images/arrow-down-solid.svg"
import arrowUp from "../../images/arrow-up-solid.svg"


export default class ChosenRangeTopChart extends Component {
  constructor(props) {
    super(props);
    this.state = {
      status: {
        error: null,
        isLoaded: true,
        isSpotifyAuthenticated: false,
      },

      items: [],
      selectedCheckboxes: [],
      formData: {
        username: '',
        dateStart: '2000-01-01',
        dateEnd: '2022-01-01',
        tracksNum: '50',
        playlistName: "ConvertifyFM",
        playlistDesc: 'Generated by ConvertifyFM'
      }
    };

    this.authenticateSpotify = this.authenticateSpotify.bind(this);
    this.handleInputChange = this.handleInputChange.bind(this)
    this.handleSearchButtonClick = this.handleSearchButtonClick.bind(this)
    this.handleCheckbox = this.handleCheckbox.bind(this);
    this.handleCheckAll = this.handleCheckAll.bind(this);
    this.handleUncheckAll = this.handleUncheckAll.bind(this);
    this.handleSubmitPlaylist = this.handleSubmitPlaylist.bind(this);
  }

  handleScrollBottom() {
    window.scroll({
      top: document.body.offsetHeight,
      left: 0, 
      behavior: 'smooth',
    });
  }

  handleScrollUp() {
    window.scroll({
      top: document.body.offsetHeight * (-1),
      left: 0, 
      behavior: 'smooth',
    });
  }

  handleInputChange(event) {
    const formData = { ...this.state.formData }
    formData[event.target.name] = event.target.value

    this.setState(prevState => ({ ...prevState, formData: formData }))
  }

  handleSearchButtonClick(event) {
    event.preventDefault()
    const { formData, status } = { ...this.state }
    const dateStart = formData.dateStart.replace(/^^(\d{4})-(\d{2})-(\d{2})$/, "$3.$2.$1")
    const dateEnd = formData.dateEnd.replace(/^^(\d{4})-(\d{2})-(\d{2})$/, "$3.$2.$1")
    formData.playlistDesc = `${formData.username}'s LastFM top tracks for ${dateStart} - ${dateEnd} generated by ConvertifyFM.`
    status.isLoaded = false
    this.setState(prevState => ({ ...prevState, formData: formData, status: status }))
    const body = {
      user_id: formData.username,
      date_from: convertToUnixDate(formData.dateStart),
      date_to: convertToUnixDate(formData.dateEnd),
      limit: formData.tracksNum,
    }

    // Fetch LastFM top charts tracklist and pass it to spotify search
    makeRequest({
      endpoint: '/lastfm/user_weekly_charts',
      body,
      method: 'POST',
      other: {
        mode: "cors",
        credentials: "include"
      }
    }).then(lastfmTracks => {
      console.log(lastfmTracks)
      return makeRequest({
        endpoint: '/spotify/search',
        method: 'POST',
        body: { tracklist: lastfmTracks },
        other: {
          mode: "cors",
          credentials: "include"
        }
      })
    }).then(spotifyTracks => {
      console.log(spotifyTracks)
      status.isLoaded = true
      this.setState({
        status: status,
        items: spotifyTracks.tracks,
        selectedCheckboxes: spotifyTracks.tracks.map(track => track.uri).reduce((o, key) => ({ ...o, [key]: true }), {})
      })
    })
  }

  handleCheckbox(event) {
    const selectedCheckboxes = this.state.selectedCheckboxes;
    selectedCheckboxes[event.target.value] = event.target.checked;

    this.setState({
      selectedCheckboxes: selectedCheckboxes
    });
  };

  handleCheckAll() {
    const selectedCheckboxes = this.state.selectedCheckboxes;

    this.setState({
      selectedCheckboxes: Object.keys(selectedCheckboxes).reduce((o, key) => ({ ...o, [key]: true }), {})
    });
  }

  handleUncheckAll() {
    const selectedCheckboxes = this.state.selectedCheckboxes;

    this.setState({
      selectedCheckboxes: Object.keys(selectedCheckboxes).reduce((o, key) => ({ ...o, [key]: false }), {})
    });
  }

  handleSubmitPlaylist() {
    const selectedTracks = filterTracks(this.state.selectedCheckboxes, value => value == true);
    const body = {
      "tracks": Object.keys(selectedTracks),
      "playlist_name": this.state.formData.playlistName,
      "playlist_desc": this.state.formData.playlistDesc
    }
    console.log(body.tracks)

    makeRequest({
      endpoint: "/spotify/playlist",
      method: "POST",
      other: {
        mode: "cors",
        credentials: "include",
      },
      body
    })
  }

  authenticateSpotify() {
    makeRequest({
      endpoint: "/is-authenticated",
      other: {
        mode: "cors",
        credentials: "include",
      },
    })
      .then(data => {
        const status = { ...this.state.status };
        status["isSpotifyAuthenticated"] = data.status;
        this.setState(prevState => ({ ...prevState, status: status, }))

        if (!data.status) {
          makeRequest({
            endpoint: "/login",
            other: {
              mode: "cors",
              credentials: "include",
            },
          })
            .then(data => {
              // window.location.replace(data.url)
              console.log(data)
            })
        }
      })

  }
  componentDidMount() {
    this.authenticateSpotify()
    makeRequest({
      endpoint: '/login',
      other: {
        mode: 'cors',
        include: 'credentials'
      }
    }).then(data => {
      this.setState({ loginURL: data.url })
    })




  }

  componentDidUpdate() {
    console.log(this.state)
  }

  render() {
    const { isLoaded, error, isSpotifyAuthenticated } = this.state.status
    const { items, selectedCheckboxes, formData, loginURL } = this.state
    const handleInputChange = this.handleInputChange
    const handleSearchButtonClick = this.handleSearchButtonClick
    const handleCheckbox = this.handleCheckbox
    let results, scrollButtons

    if (isSpotifyAuthenticated) {
      if (error) {
        results = <div>Ошибка: {error.message || error}</div>
      }
      else if (!isLoaded) {
        console.log('Loading results')
        results = <div className="loader"></div>
      } else if (items.length > 0) {
        results = (
          <>
          <div className="Tracks">
            <div className="buttonsContainer">
              <button onClick={this.handleCheckAll}>Check All</button>
              <button onClick={this.handleUncheckAll}>Uncheck All</button>
              <button onClick={this.handleScrollBottom}>Submit Tracks</button>
            </div>

            {
              items?.map(function (item) {
                return (
                  <TrackCard
                    key={item.uri}
                    track={item}
                    onChange={handleCheckbox} checked={selectedCheckboxes[item.uri]} />
                )

              })
            }
          </div>
          <SubmitPlaylistForm 
            formData={this.state.formData}
            handleInputChange={handleInputChange}
            handleSubmit={this.handleSubmitPlaylist}
          />
            <div className="buttonsScroll-container">
              <button id="scroll-up" onClick={this.handleScrollUp} ><img src={arrowUp} alt="" /></button>
              <button id="scroll-down" onClick={this.handleScrollBottom}><img src={arrowDown} alt="" /></button>
            </div>
          </>
        )
      }


    } else {
      results = <div>Error</div>
    }

    // if (document.body.scrollHeight > 1000) {
    //   scrollButtons = (<div className="buttonsScroll-container">
    //   <button id="scroll-up" onClick={this.handleScrollUp} ><img src={arrowUp} alt="" /></button>
    //   <button id="scroll-down" onClick={this.handleScrollBottom}><img src={arrowDown} alt="" /></button>
    // </div>)
    // } else {
    //   scrollButtons = (<></>)
    // }


    return (
      <main>
        <div className="use-description">
          <h1>Chosen Time Period LastFM Chart</h1>
          <p>Make Spotify playlist of your best music for different time periods</p>
        </div>
        <form className="border-comic" onSubmit={handleSearchButtonClick} >

          <p>Last.fm username</p>
          <div className="row-container">
            <input
              type="text"
              name="username" id=""
              value={formData.username}
              onChange={handleInputChange}
              required />
          </div>

          <p>Time range</p>
          {/* <label htmlFor="date-start">From:</label> */}
          <div className="row-container">
            <input
              type="date"
              name="dateStart"
              id="date-start"
              value={formData.dateStart}
              onChange={handleInputChange} />
            <span> - </span>
            {/* <label htmlFor="date-start">To:</label> */}
            <input
              type="date"
              name="dateEnd"
              id="date-end"
              value={formData.dateEnd}
              onChange={handleInputChange} />
          </div>

          <p>Number of tracks</p>
          <div className="row-container">
            <input
              type="number"
              name="tracksNum"
              id="tracks-num"
              value={formData.tracksNum}
              onChange={handleInputChange}
              required />
          </div>

          <button type="submit" id="search" >Search</button>

        </form>
        {results}

        {/* {scrollButtons} */}
      </main>
    )
  }
}

